'use strict';

angular.module('app', ['ui.router', 'ngCookies', 'ui.bootstrap']).config(['$httpProvider', function ($httpProvider) {
  $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=utf-8';

  var param = function param(obj) {
    var query = '',
        name,
        value,
        fullSubName,
        subName,
        subValue,
        innerObj,
        i;

    for (name in obj) {
      value = obj[name];

      if (value instanceof Array) {
        for (i = 0; i < value.length; ++i) {
          subValue = value[i];
          fullSubName = name + '[' + i + ']';
          innerObj = {};
          innerObj[fullSubName] = subValue;
          query += param(innerObj) + '&';
        }
      } else if (value instanceof Object) {
        for (subName in value) {
          subValue = value[subName];
          fullSubName = name + '[' + subName + ']';
          innerObj = {};
          innerObj[fullSubName] = subValue;
          query += param(innerObj) + '&';
        }
      } else if (value !== undefined && value !== null) query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';
    }

    return query.length ? query.substr(0, query.length - 1) : query;
  };

  // Override $http service's default transformRequest
  $httpProvider.defaults.transformRequest = [function (data) {
    return angular.isObject(data) && String(data) !== '[object File]' ? param(data) : data;
  }];
}]);

// var host = 'http://125.216.250.105/bbter/index.php/Home/'
// var host = 'http://192.168.1.120/bbter/index.php/Home/'
var host = 'http://222.201.132.27/bbter-all/index.php/Home/';

/*new Image().src = 'img/TZH.png';
new Image().src = 'img/TMH.png';
new Image().src = 'img/checked.png';*/

function encrypt(msg) {
  return sodium.crypto_box_easy(msg, sodium.from_hex(nonce), sodium.from_hex(pk), sodium.from_hex(sk), 'hex');
}

var school = [{ 'name': '请选择', 'value': '' }, { 'name': 'C.材料科学与工程学院', 'value': '材料科学与工程学院' }, { 'name': 'D.电子与信息学院', 'value': '电子与信息学院' }, { 'name': 'D.电力学院', 'value': '电力学院' }, { 'name': 'F.法学院(知识产权学院)', 'value': '法学院(知识产权学院)' }, { 'name': 'G.国际教育学院', 'value': '国际教育学院' }, { 'name': 'G.工商管理学院(创业教育学院)', 'value': '工商管理学院(创业教育学院)' }, { 'name': 'G.公共管理学院', 'value': '公共管理学院' }, { 'name': 'H.环境与能源学院', 'value': '环境与能源学院' }, { 'name': 'H.化学与化工学院', 'value': '化学与化工学院' }, { 'name': 'J.机械与汽车工程学院', 'value': '机械与汽车工程学院' }, { 'name': 'J.计算机科学与工程学院', 'value': '计算机科学与工程学院' }, { 'name': 'J.建筑学院', 'value': '建筑学院' }, { 'name': 'J.经济与贸易学院', 'value': '经济与贸易学院' }, { 'name': 'L.理学院(数学系 物理系)', 'value': '理学院(数学系 物理系)' }, { 'name': 'Q.轻工与食品学院', 'value': '轻工与食品学院' }, { 'name': 'R.软件学院', 'value': '软件学院' }, { 'name': 'S.生物科学与工程学院', 'value': '生物科学与工程学院' }, { 'name': 'S.思想政治学院', 'value': '思想政治学院' }, { 'name': 'S.设计学院', 'value': '设计学院' }, { 'name': 'T.土木与交通学院', 'value': '土木与交通学院' }, { 'name': 'T.体育学院', 'value': '体育学院' }, { 'name': 'W.外国语学院', 'value': '外国语学院' }, { 'name': 'X.新闻与传播学院', 'value': '新闻与传播学院' }, { 'name': 'Y.艺术学院', 'value': '艺术学院' }, { 'name': 'Y.医学院', 'value': '医学院' }, { 'name': 'Z.自动化科学与工程学院', 'value': '自动化科学与工程学院' }];

var gender = [{ 'name': '请选择', 'value': '' }, { 'name': '男', 'value': '男' }, { 'name': '女', 'value': '女' }];

var dprt = [{ 'name': '所有部门', 'value': '' }, { 'name': '编辑部', 'value': '编辑部' }, { 'name': '策划推广部', 'value': '策划推广部' }, { 'name': '技术部', 'value': '技术部' }, { 'name': '节目部', 'value': '节目部' }, { 'name': '人力资源部', 'value': '人力资源部' }, { 'name': '视觉设计部', 'value': '视觉设计部' }, { 'name': '视频部', 'value': '视频部' }, { 'name': '外联部', 'value': '外联部' }, { 'name': '综合管理部', 'value': '综合管理部' }, { 'name': '综合新闻部', 'value': '综合新闻部' }];

var position = [{ 'name': '所有职位', 'value': '' }, { 'name': '干事', 'value': '干事' }, { 'name': '主管', 'value': '主管' }, { 'name': '部长', 'value': '部长' }, { 'name': '常委', 'value': '常委' }];

var superposition = [{ 'name': '干事', 'value': '干事' }, { 'name': '主管', 'value': '主管' }, { 'name': '部长', 'value': '部长' }, { 'name': '常委', 'value': '常委' }, { 'name': '超级管理员', 'value': '超级管理员' }];
'use strict';

function naviSecondery(num) {
  var naviSecondery = document.getElementsByClassName('naviSeconderyBtn');
  for (var x = 0; x < naviSecondery.length; x++) {
    if (x != num) {
      naviSecondery[x].setAttribute('class', 'naviSeconderyBtn fontNormal');
    } else {
      naviSecondery[x].setAttribute('class', 'naviSeconderyBtn fontNormal naviSeconderyBtnActive');
    }
  }
}

function moreMenu() {
  var menu = document.getElementById('moreMenu');
  var moreBtn = document.getElementById('moreBtn');
  document.addEventListener('click', function (e) {
    if (moreBtn == e.target && menu.style.display == 'none') {
      menu.style.display = 'block';
      setTimeout(function () {
        menu.style.opacity = '1';
      }, 0);
    }
    if (moreBtn != e.target && menu.style.display == 'block') {
      menu.style.opacity = '0';
      setTimeout(function () {
        menu.style.display = 'none';
      }, 200);
    }
  });
}

function optionMenu() {
  var optionMenu = document.getElementById('optionMenu');
  var optionBtn = document.getElementById('optionBtn');
  var cfrm = document.getElementsByClassName('txtBtn');
  document.addEventListener('mousedown', function (e) {
    if (optionBtn == e.target && optionMenu.style.display == 'none') {
      setTimeout(function () {
        optionMenu.style.display = 'block';
      }, 1);
      setTimeout(function () {
        optionMenu.style.opacity = '1';
      }, 2);
    }
    if ((optionMenu != e.target && optionMenu != e.target.parentNode && optionMenu != e.target.parentNode.parentNode || cfrm[0] == e.target || cfrm[1] == e.target) && optionMenu.style.display == 'block') {
      console.log(e.target);
      optionMenu.style.opacity = '0';
      setTimeout(function () {
        optionMenu.style.display = 'none';
      }, 201);
    }
  });
}

// function secretShow () {
//   var hl = document.getElementById('loginLeft')
//   var hr = document.getElementById('loginRight')
//   var secretInput = document.getElementById('secret')
//   hl.src = 'img/TZ.png'
//   hr.src = 'img/TM.png'
// }

// function secretHide () {
//   var hl = document.getElementById('loginLeft')
//   var hr = document.getElementById('loginRight')
//   var secretInput = document.getElementById('secret')
//   hl.src = 'img/TZH.png'
//   hr.src = 'img/TMH.png'
// }
'use strict';

angular.module('app').directive('logoutBtn', function (userService) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      element.bind('click', function () {
        scope.flag = true;
        userService.logout();
        location.href = '#/login';
      });
    }
  };
});
"use strict";
'use strict';

angular.module('app').config(function ($stateProvider, $urlRouterProvider) {

  function authenticate($timeout, $state, authService) {
    if (!authService.token) {
      $timeout(function () {
        return $state.go('login');
      });
      return Promise.reject();
    }
  }

  $urlRouterProvider.when('', '/user/info').when('/user', '/user/info').when('/list', '/list/all/&&/1').when('/dprt', '/dprt/all');

  $stateProvider.state('user', {
    abstract: true,
    url: '/user',
    templateUrl: 'templates/navi/navi-user.html',
    resolve: { authenticate: authenticate }
  }).state('list', {
    url: '/list',
    abstract: true,
    templateUrl: 'templates/navi/navi-list.html',
    resolve: { authenticate: authenticate }
  }).state('dprt', {
    url: '/dprt',
    abstract: true,
    templateUrl: 'templates/navi/navi-dprt.html',
    resolve: { authenticate: authenticate }
  }).state('login', {
    url: '/login',
    templateUrl: 'templates/login.html',
    resolve: {
      check: function check($timeout, $state, authService) {
        if (authService.token) {
          $timeout(function () {
            return $state.go('user.info');
          });
          return Promise.reject();
        }
      }
    },
    controller: function controller($scope, $state, $cookies, userService) {

      /*$scope.secretLeft = 'img/TZ.png';
      $scope.secretRight = 'img/TM.png';

      $scope.secretHide = function () {

        $scope.secretLeft = 'img/TZ.png';
        $scope.secretRight = 'img/TM.png';
      };

      $scope.secretShow = function () {

        $scope.secretLeft = 'img/TZH.png';
        $scope.secretRight = 'img/TMH.png';
      };*/

      $scope.alerts = [];
      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      $scope.update = function () {

        $scope.flag = true;
        userService.login($scope).then(function () {
          $state.go('user.info');
        }).catch(function (_ref) {
          var message = _ref.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').service('requestService', function ($http, $state, authService) {

  return {

    errMsg: {
      '101': '存在未输入项',
      '102': '账号错误',
      '103': '密码错误',
      '104': '宿舍号有误',
      '105': '新旧密码相同',
      '106': '确认密码不一致',
      '107': '旧密码错误',
      '108': '操作对象不能包含自己',
      '201': '请先完善个人资料',
      '202': '部分添加成功,未成功条目已在学号框中呈现,请检查输入',
      '302': '账号异常，请重新登录',
      '403': '你不具有操作权限',
      '404': '你不具有查看权限',
      '500': '未知错误'
    },

    post: function post(action) {
      var _this = this;

      var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      if (authService && data instanceof Object) {
        data.auth = this.auth();
      }
      return $http.post(host + action, data).then(function (response) {

        authService.setToken(response.data.token);

        switch (response.data.code) {
          case 302:
            // 账号异常，请重新登录
            $state.go('login');
            break;
        }

        return response.data;
      }).catch(function (error) {

        return Promise.resolve({ error: error, code: 500 });
      }).then(function (response) {

        var code = response.code;
        if (code == 200) {
          return response;
        }
        return Promise.reject({ response: response, code: code, message: _this.errMsg[response.code] });
      });
    },
    auth: function auth() {
      var timestamp = Date.now();
      var token = authService.token;
      return token + '.' + timestamp + '.' + encrypt(token + ':' + timestamp);
    }
  };
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('dprt.all', {
    url: '/all',
    templateUrl: 'templates/department/department-all.html',
    controller: function controller($scope, $state, dprtall) {

      moreMenu();
      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      dprtall.show().then(function (_ref) {
        var data = _ref.data;

        $scope.dprts = data.dprt;
        $scope.editor = data.editor;
      }).catch(function (_ref2) {
        var message = _ref2.message;

        alertbox('danger', message);
      });

      $scope.radio = {};

      $scope.edit = function () {
        if ($scope.radio.dprt != null) {
          $state.go('dprt.edit', { id: $scope.radio.dprt });
        } else {
          alertbox('danger', '请选择操作对象');
        }
      };

      $scope.isEdit = function (value) {
        return !!value;
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('dprt.add', {
    url: '/add',
    templateUrl: 'templates/department/department-add.html',
    controller: function controller($scope, $state, dprtall) {

      moreMenu();

      $scope.add = function () {

        $scope.flag = true;

        dprtall.add({
          dprtname: $scope.dprtname,
          dprtnote: $scope.dprtnote
        }).then(function () {
          alertbox('success', '部门资料修改成功');
          setTimeout(function () {
            $state.go('dprt.all');
          }, 1500);
        }).catch(function (_ref) {
          var message = _ref.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('dprt.edit', {
    url: '/edit/:id',
    templateUrl: 'templates/department/department-edit.html',
    controller: function controller($scope, $stateParams, $state, dprtall) {

      moreMenu();
      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      var id = $stateParams.id;

      dprtall.editshow({ id: id }).then(function (_ref) {
        var data = _ref.data;

        $scope.content = data;
        $scope.dprtname = $scope.content.dprtname;
        $scope.dprtnote = $scope.content.dprtnote;
      }).catch(function (_ref2) {
        var message = _ref2.message;

        alertbox('danger', message);
      });

      $scope.edit = function () {

        $scope.flag = true;

        dprtall.edit({
          id: id,
          dprtname: $scope.dprtname,
          dprtnote: $scope.dprtnote
        }).then(function () {
          alertbox('success', '部门资料修改成功');
          setTimeout(function () {
            $state.go('dprt.all');
          }, 1500);
        }).catch(function (_ref3) {
          var message = _ref3.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('user.pw', {
    url: '/pwedit',
    templateUrl: 'templates/user/password-edit.html',
    controller: function controller($scope, $state, userService) {

      moreMenu();
      naviSecondery(2);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      $scope.pwedit = function () {

        if ($scope.newpw != $scope.cfrmpw || $scope.oldpw == $scope.newpw) {
          if ($scope.oldpw == $scope.newpw) {
            alertbox('danger', '新旧密码相同');
          } else if ($scope.newpw != $scope.cfrmpw) {
            alertbox('danger', '确认密码不一致');
          }
          return;
        }

        if (!window.confirm('确认修改密码吗?')) {
          return;
        }

        $scope.flag = true;

        userService.password({
          old: $scope.oldpw,
          cfrm: $scope.cfrmpw,
          'new': $scope.newpw
        }).then(function (response) {
          alertbox('success', '密码修改成功,请重新登录');

          setTimeout(function () {
            userService.logout();
            $state.go('login');
          }, 1500);
        }).catch(function (_ref) {
          var message = _ref.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('user.edit', {
    url: '/infoedit',
    templateUrl: 'templates/user/info-edit.html',
    controller: function controller($scope, $state, userService) {

      moreMenu();
      naviSecondery(1);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      userService.show().then(function (_ref) {
        var data = _ref.data;

        $scope.genderopt = gender;
        $scope.schoolopt = school;

        $scope.content = data;

        $scope.username = data.username;
        $scope.room = data.room;
        $scope.telLong = data.telLong;
        $scope.telShort = data.telShort;
        $scope.email = data.email;

        $scope.gender = data.gender;
        $scope.school = data.school;
      }).catch(function (_ref2) {
        var message = _ref2.message;
        var code = _ref2.code;

        var type = 'danger';
        if (code === 201) {
          type = '';
          $scope.gender = $scope.school = '';
        }
        alertbox(type, message);
      });

      $scope.infoedit = function () {
        $scope.flag = true;

        userService.edit({
          username: $scope.username,
          gender: $scope.gender,
          school: $scope.school,
          room: $scope.room,
          telLong: $scope.telLong,
          telShort: $scope.telShort,
          email: $scope.email
        }).then(function () {
          alertbox('success', '个人资料修改成功');
          setTimeout(function () {
            $state.go('user.info');
          }, 1500);
        }).catch(function (_ref3) {
          var message = _ref3.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('user.info', {
    url: '/info',
    templateUrl: 'templates/user/info-detail.html',
    controller: function controller($scope, $state, userService) {

      moreMenu();
      naviSecondery(0);

      userService.show().then(function (_ref) {
        var data = _ref.data;

        $scope.content = data;
      });
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('list.all', {
    url: '/all/:dprt&:position&:keyword/:current',
    templateUrl: 'templates/list/list-all.html',
    controller: function controller($scope, $stateParams, $state, listall) {

      moreMenu();
      naviSecondery(0);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      var current = $stateParams.current | 0;

      $scope.dprtopt = dprt;
      $scope.positionopt = position;

      $scope.dprt = $stateParams.dprt;
      $scope.position = $stateParams.position;
      $scope.keyword = $stateParams.keyword;
      $scope.current = $stateParams.current;

      listall.show({
        current: current,
        count: 15,
        filter: {
          dprt: $stateParams.dprt,
          position: $stateParams.position,
          keyword: $stateParams.keyword
        }
      }).then(function (_ref) {
        var data = _ref.data;

        $scope.members = data.members;
        $scope.total = data.total;
        $scope.editor = data.editor;
      }).catch(function (_ref2) {
        var message = _ref2.message;

        alertbox('danger', message);
      });

      document.getElementById('search').focus();

      $scope.isEdit = function (value) {
        return !!value;
      };

      $scope.filter = function () {
        $state.go('list.all', { dprt: $scope.dprt, position: $scope.position, keyword: $scope.keyword, current: 1 });
      };

      $scope.reset = function () {
        $state.go('list.all', { current: 1 });
      };

      $scope.pagenext = function () {
        if (current + 1 <= $scope.total) {
          $state.go('list.all', { dprt: $scope.dprt, position: $scope.position, keyword: $scope.keyword, current: current + 1 });
        } else {
          alertbox('danger', '已经是最后一页');
        }
      };

      $scope.pageprev = function () {
        if (current - 1 >= 1) {
          $state.go('list.all', { dprt: $scope.dprt, position: $scope.position, keyword: $scope.keyword, current: current - 1 });
        } else {
          alertbox('danger', '已经是第一页');
        }
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('list.detail', {
    url: '/detail/:id',
    templateUrl: 'templates/list/list-detail.html',
    controller: function controller($scope, $stateParams, listall, listdprt, userService) {

      moreMenu();
      naviSecondery(0);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      $scope.positionopt = superposition;

      function showdetail() {

        listall.detail($stateParams).then(function (_ref) {
          var data = _ref.data;

          $scope.content = data.content;
          $scope.editor = data.editor;
          $scope.position = $scope.content.position;
        }).catch(function (_ref2) {
          var message = _ref2.message;

          alertbox('danger', message);
        });
      }

      showdetail();

      $scope.isEdit = function (value) {
        if (value) {
          return true;
        } else {
          return false;
        }
      };

      $scope.changeposition = function () {
        $scope.flag = true;

        var editmsg = {
          id: $stateParams.id,
          position: $scope.position
        };

        listdprt.position(editmsg).then(function () {
          alertbox('success', '修改职位成功');
          showdetail();
          setTimeout(function () {
            history.back();
          }, 1500);
        }).catch(function (_ref3) {
          var message = _ref3.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('list.dprt', {
    url: '/dprt',
    templateUrl: 'templates/list/list-department.html',
    controller: function controller($scope, $state, listdprt) {

      optionMenu();
      moreMenu();
      naviSecondery(1);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      $scope.content = {};

      function showdprt() {

        listdprt.show().then(function (_ref) {
          var data = _ref.data;

          $scope.members = data.members;
          $scope.editor = data.editor;
        }).catch(function (_ref2) {
          var message = _ref2.message;

          alertbox('danger', message);
        });
      }

      showdprt();

      $scope.isEdit = function (value) {
        return !!value;
      };

      $scope.checkbox = [];
      $scope.rcl = '退休';
      $scope.position = '主管';

      $scope.checkbox = [];
      $scope.allchecked = false;

      function checkboxselect() {
        return $scope.checkbox.map(function (checked, index) {
          return checked && $scope.members[index].id;
        }).filter(function (v) {
          return v;
        }).join(',');
      }

      $scope.checkall = function (o) {
        $scope.checkbox = $scope.members.map(function () {
          return $scope.allchecked;
        });
      };

      $scope.recycle = function () {

        var id = checkboxselect();

        if (!id) {
          alertbox('danger', '请选择要操作的对象');
          return;
        }

        var check = document.getElementById('check');
        if (check.checked) {
          check.click();
        }

        $scope.flag = true;

        listdprt.rcl({ id: id, note: $scope.rcl }).then(function () {
          alertbox('success', '置入回收站成功');
          showdprt();
        }).catch(function (_ref3) {
          var message = _ref3.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };

      $scope.changeposition = function () {

        var id = checkboxselect();

        if (!id) {
          alertbox('danger', '请选择要操作的对象');
          return;
        }

        if (!window.confirm('确认修改职位吗?')) {
          return;
        }

        $scope.flag = true;

        listdprt.position({ id: id, position: $scope.position }).then(function () {
          alertbox('success', '修改职位成功');
          showdprt();
        }).catch(function (_ref4) {
          var message = _ref4.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };

      $scope.reset = function () {
        var id = checkboxselect();
        if (id) {
          $state.go('list.reset', { id: id });
        } else {
          alertbox('danger', '请选择操作对象');
        }
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('list.add', {
    url: '/add',
    templateUrl: 'templates/list/list-add.html',
    controller: function controller($scope, listdprt, userService) {

      moreMenu();
      naviSecondery(1);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      alertbox('', '当添加多个学号时, 每个学号用回车换行');

      $scope.position = '干事';

      function showuncompleted() {

        return listdprt.addshow().then(function (_ref) {
          var data = _ref.data;

          $scope.uncompleteds = data.uncompleteds;
        }).catch(function (_ref2) {
          var message = _ref2.message;

          alertbox('danger', message);
        });
      }

      showuncompleted();

      $scope.add = function () {

        var str1 = document.getElementById('studentNo').innerHTML;
        var str2 = str1.replace(/\<\/span><span style="-webkit-text-stroke-width: 0.2px;"><br><\/span>\<\/div><div style="-webkit-text-stroke-width: 0.2px;"><span style="-webkit-text-stroke-width: 0.2px;">/g, '.').replace(/\<span style="-webkit-text-stroke-width: 0.2px;"\>/g, '').replace(/\<\/span\>\<br style="-webkit-text-stroke-width: 0.2px;"\>\<div style="-webkit-text-stroke-width: 0.2px;"\>/g, '').replace(/<\/span><\/div>/g, '').replace(/<\/span><div style="-webkit-text-stroke-width: 0.2px;">/g, '').replace(/<div style="-webkit-text-stroke-width: 0.2px;"><br>/g, '').replace(/<div style="-webkit-text-stroke-width: 0.2px;">/g, '').replace(/<br>/g, '').replace(/<\/span>/g, '.').replace(/<\/div>/g, '').replace(/<div>/g, '').replace(/<span>/g, '');

        $scope.flag = true;

        listdprt.add({
          studentno: str2,
          position: $scope.position
        }).then(function () {
          alertbox('success', '添加新成员成功，请在部门列表查看');
          setTimeout(function () {
            $state.go('list.dprt');
          }, 1500);
        }).catch(function (_ref3) {
          var message = _ref3.message;

          alertbox('danger', message);
          $scope.studentno = response.data.data.failed.join('\r\n');
          showuncompleted();
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('list.reset', {
    url: '/reset/:id',
    templateUrl: 'templates/list/list-resetpw.html',
    controller: function controller($scope, $stateParams, $state, listdprt) {

      moreMenu();
      naviSecondery(1);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      listdprt.resetshow({ id: $stateParams.id }).then(function (_ref) {
        var data = _ref.data;

        alertbox('', '此操作将修改对象的密码，无法撤销');
        $scope.members = data.members;
      }).catch(function (_ref2) {
        var code = _ref2.code;
        var message = _ref2.message;

        if (code == 108) {
          setTimeout(function () {
            history.back();
          }, 1500);
        }
        alertbox('danger', message);
      });

      $scope.reset = function () {

        if ($scope.newpw != $scope.cfrmpw) {
          alertbox('danger', '确认密码不一致');
          return;
        }

        if (!window.confirm('确认强制修改密码吗?')) {
          return;
        }

        $scope.flag = true;

        listdprt.reset({
          id: idrequest.id,
          pw: $scope.newpw,
          pwcfrm: $scope.cfrmpw
        }).then(function () {
          alertbox('success', '强制修改密码成功');
          setTimeout(function () {
            $state.go('list.dprt');
          }, 1500);
        }).catch(function (_ref3) {
          var message = _ref3.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').config(function ($stateProvider) {
  $stateProvider.state('list.recycle', {
    url: '/recycle/:current',
    templateUrl: 'templates/list/list-recycle.html',
    controller: function controller($scope, $stateParams, $state, listrcl) {

      moreMenu();
      naviSecondery(2);

      $scope.alerts = [];

      function alertbox(type, msg) {
        if ($scope.alerts != []) {
          $scope.alerts.shift();
        }
        $scope.alerts.push({ type: type, msg: msg });
      }

      $scope.closeAlert = function (index) {
        $scope.alerts.splice(index, 1);
      };

      var current = $stateParams.current | 0;

      $scope.current = current;

      listrcl.show({ current: current, count: 15 }).then(function (_ref) {
        var data = _ref.data;

        $scope.members = data.members;
        $scope.total = data.total;
      }).catch(function (_ref2) {
        var message = _ref2.message;

        alertbox('danger', message);
      });

      $scope.pagenext = function () {
        if (current + 1 <= $scope.total) {
          $state.go('list.recycle', { current: current + 1 });
        } else {
          alertbox('danger', '已经是最后一页');
        }
      };

      $scope.pageprev = function () {
        if (current - 1 >= 1) {
          $state.go('list.recycle', { current: current - 1 });
        } else {
          alertbox('danger', '已经是第一页');
        }
      };

      $scope.checkbox = [];
      $scope.allchecked = false;

      function checkboxselect() {
        return $scope.checkbox.map(function (checked, index) {
          return checked && $scope.members[index].id;
        }).filter(function (v) {
          return v;
        }).join(',');
      }

      $scope.checkall = function (o) {
        $scope.checkbox = $scope.members.map(function () {
          return $scope.allchecked;
        });
      };

      $scope.recover = function () {

        var id = checkboxselect();

        if (!id) {
          alertbox('danger', '请选择要操作的对象');
          return;
        }

        $scope.flag = true;

        listrcl.recover({ id: id, position: $scope.position }).then(function (response) {
          alertbox('success', '恢复成功。对象被还原至部门列表');
        }).catch(function (_ref3) {
          var message = _ref3.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };

      $scope.del = function () {

        var id = checkboxselect();

        if (!id) {
          alertbox('danger', '请选择要操作的对象');
          return;
        }

        if (!window.confirm('此操作将无法撤销,确认彻底删除吗?')) {
          return;
        }

        var check = document.getElementById('check');
        if (check.checked) {
          check.click();
        }

        $scope.flag = true;

        listrcl.del({ id: id, position: $scope.position }).then(function () {
          alertbox('success', '彻底删除对象成功');
        }).catch(function (_ref4) {
          var message = _ref4.message;

          alertbox('danger', message);
        }).then(function () {
          $scope.flag = false;
        });
      };
    }
  });
});
'use strict';

angular.module('app').service('dprtall', function (requestService) {
  return {
    show: function show() {
      return requestService.post('Department/listAll');
    },
    editshow: function editshow(data) {
      return requestService.post('Department/detail', { data: data });
    },
    edit: function edit(data) {
      return requestService.post('Department/edit', { data: data });
    } // ,
    // add(editmsg){
    // 	var postdata = {}

    // 	postdata.auth = userService.auth()
    // 	postdata.data = editmsg

    // 	return $http.post('Department/add',postdata)

    // 	},

    // del(editmsg){

    // 	var postdata = {}

    // 	postdata.auth = userService.auth()
    // 	postdata.data = editmsg

    // 	return $http.post('Department/del',postdata)

    // 	}

  };
});
'use strict';

angular.module('app').service('listall', function (requestService) {

  return {
    show: function show(data) {
      return requestService.post('User/listall', { data: data });
    },
    detail: function detail(data) {
      return requestService.post('User/othersinfo', { data: data });
    }
  };
});
'use strict';

angular.module('app').service('listdprt', function (requestService) {

  return {
    show: function show() {
      return requestService.post('User/dprtall');
    },
    addshow: function addshow() {
      return requestService.post('User/getUnCompleted');
    },
    resetshow: function resetshow(data) {
      return requestService.post('User/pwApply', { data: data });
    },
    add: function add(data) {
      return requestService.post('User/batchAdd', { data: data });
    },
    rcl: function rcl(data) {
      return requestService.post('User/rcl', { data: data });
    },
    position: function position(data) {
      return requestService.post('User/groupChange', { data: data });
    },
    reset: function reset(editmsg) {
      return requestService.post('User/pwReset', {
        data: {
          id: editmsg.id,
          pw: md5(editmsg.pw),
          pwcfrm: md5(editmsg.pwcfrm)
        }
      });
    }
  };
});
'use strict';

angular.module('app').service('listrcl', function (requestService) {

  return {
    show: function show(data) {
      return requestService.post('User/listRcl', { data: data });
    },
    del: function del(data) {
      return requestService.post('User/del', { data: data });
    },
    recover: function recover(data) {
      return requestService.post('User/recover', { data: data });
    }
  };
});
'use strict';

angular.module('app').service('authService', function ($cookies) {

  return {

    token: $cookies.get('token'),

    setToken: function setToken(token) {
      this.token = token;
      var expires = new Date();
      expires.setDate(expires.getDate() + 7);
      $cookies.put('token', token, { expires: expires });
    }
  };
});
'use strict';

angular.module('app').service('userService', function (requestService) {

  return {
    login: function login(user) {
      return requestService.post('Login', {
        studentno: user.studentNo,
        password: md5(user.password)
      });
    },
    logout: function logout(user) {
      requestService.post('User/logout', requestService.auth());
      $cookies.remove('token');
    },
    show: function show() {
      return requestService.post('User/info');
    },
    edit: function edit(data) {
      return requestService.post('User/infoEdit', { data: data });
    },
    password: function password(editmsg) {
      return requestService.post('User/pwEdit', {
        data: {
          old: md5(editmsg.old),
          cfrm: md5(editmsg.cfrm),
          'new': md5(editmsg['new'])
        }
      });
    }
  };
});
//# sourceMappingURL=bundle.min.js.map
